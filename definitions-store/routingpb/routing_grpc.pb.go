// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: routing.proto

package routingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutingServiceClient is the client API for RoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingServiceClient interface {
	GetRateBasedonAvailability(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetRateBasedonAvailabilityClient, error)
	GetCarAvailability(ctx context.Context, in *RoutingAvailabilityCarRequest, opts ...grpc.CallOption) (RoutingService_GetCarAvailabilityClient, error)
	GetLocation(ctx context.Context, in *RoutingAvailabilityCarRequest, opts ...grpc.CallOption) (*Null, error)
}

type routingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {
	return &routingServiceClient{cc}
}

func (c *routingServiceClient) GetRateBasedonAvailability(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetRateBasedonAvailabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[0], "/routingpb.RoutingService/GetRateBasedonAvailability", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceGetRateBasedonAvailabilityClient{stream}
	return x, nil
}

type RoutingService_GetRateBasedonAvailabilityClient interface {
	Send(*RoutingAvailabilityRequest) error
	Recv() (*RoutingAvailabilityResponse, error)
	grpc.ClientStream
}

type routingServiceGetRateBasedonAvailabilityClient struct {
	grpc.ClientStream
}

func (x *routingServiceGetRateBasedonAvailabilityClient) Send(m *RoutingAvailabilityRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routingServiceGetRateBasedonAvailabilityClient) Recv() (*RoutingAvailabilityResponse, error) {
	m := new(RoutingAvailabilityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) GetCarAvailability(ctx context.Context, in *RoutingAvailabilityCarRequest, opts ...grpc.CallOption) (RoutingService_GetCarAvailabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[1], "/routingpb.RoutingService/GetCarAvailability", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceGetCarAvailabilityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoutingService_GetCarAvailabilityClient interface {
	Recv() (*RoutingAvailabilityCarResponse, error)
	grpc.ClientStream
}

type routingServiceGetCarAvailabilityClient struct {
	grpc.ClientStream
}

func (x *routingServiceGetCarAvailabilityClient) Recv() (*RoutingAvailabilityCarResponse, error) {
	m := new(RoutingAvailabilityCarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) GetLocation(ctx context.Context, in *RoutingAvailabilityCarRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/routingpb.RoutingService/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServiceServer is the server API for RoutingService service.
// All implementations must embed UnimplementedRoutingServiceServer
// for forward compatibility
type RoutingServiceServer interface {
	GetRateBasedonAvailability(RoutingService_GetRateBasedonAvailabilityServer) error
	GetCarAvailability(*RoutingAvailabilityCarRequest, RoutingService_GetCarAvailabilityServer) error
	GetLocation(context.Context, *RoutingAvailabilityCarRequest) (*Null, error)
	mustEmbedUnimplementedRoutingServiceServer()
}

// UnimplementedRoutingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingServiceServer struct {
}

func (UnimplementedRoutingServiceServer) GetRateBasedonAvailability(RoutingService_GetRateBasedonAvailabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRateBasedonAvailability not implemented")
}
func (UnimplementedRoutingServiceServer) GetCarAvailability(*RoutingAvailabilityCarRequest, RoutingService_GetCarAvailabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCarAvailability not implemented")
}
func (UnimplementedRoutingServiceServer) GetLocation(context.Context, *RoutingAvailabilityCarRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedRoutingServiceServer) mustEmbedUnimplementedRoutingServiceServer() {}

// UnsafeRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServiceServer will
// result in compilation errors.
type UnsafeRoutingServiceServer interface {
	mustEmbedUnimplementedRoutingServiceServer()
}

func RegisterRoutingServiceServer(s grpc.ServiceRegistrar, srv RoutingServiceServer) {
	s.RegisterService(&RoutingService_ServiceDesc, srv)
}

func _RoutingService_GetRateBasedonAvailability_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingServiceServer).GetRateBasedonAvailability(&routingServiceGetRateBasedonAvailabilityServer{stream})
}

type RoutingService_GetRateBasedonAvailabilityServer interface {
	Send(*RoutingAvailabilityResponse) error
	Recv() (*RoutingAvailabilityRequest, error)
	grpc.ServerStream
}

type routingServiceGetRateBasedonAvailabilityServer struct {
	grpc.ServerStream
}

func (x *routingServiceGetRateBasedonAvailabilityServer) Send(m *RoutingAvailabilityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routingServiceGetRateBasedonAvailabilityServer) Recv() (*RoutingAvailabilityRequest, error) {
	m := new(RoutingAvailabilityRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoutingService_GetCarAvailability_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoutingAvailabilityCarRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServiceServer).GetCarAvailability(m, &routingServiceGetCarAvailabilityServer{stream})
}

type RoutingService_GetCarAvailabilityServer interface {
	Send(*RoutingAvailabilityCarResponse) error
	grpc.ServerStream
}

type routingServiceGetCarAvailabilityServer struct {
	grpc.ServerStream
}

func (x *routingServiceGetCarAvailabilityServer) Send(m *RoutingAvailabilityCarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RoutingService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingAvailabilityCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routingpb.RoutingService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).GetLocation(ctx, req.(*RoutingAvailabilityCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingService_ServiceDesc is the grpc.ServiceDesc for RoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routingpb.RoutingService",
	HandlerType: (*RoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _RoutingService_GetLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRateBasedonAvailability",
			Handler:       _RoutingService_GetRateBasedonAvailability_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCarAvailability",
			Handler:       _RoutingService_GetCarAvailability_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routing.proto",
}
